{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["StyledContainer","ThemeProvider","StyledForm","StyledInput","TextField","p","bgColor","propOr","StyledCheckbox","Checkbox","StyledSectionTitle","Typography","StyledCell","StyledCases","StyledSingular","StyledTable","StyledGenderInfo","compose","withState","text","setText","animate","setAnimate","gender","setGender","normalizedGender","undefined","options","primary","label","value","onChange","e","target","checked","inflect","word","grammarCase","plural","StyledTitle","App","use","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAaMA,EAAkB,YAAOC,IAAP,qBAAH,mIASfC,EAAU,2HAOVC,EAAc,YAAOC,IAAP,qBAAH,oEAGX,SAAAC,GAAC,OAAKA,EAAEC,QAAF,4BAAiCD,EAAEC,QAAnC,KAAgD,KAH3C,kIAQJC,YAAO,2BAA4B,qBAR/B,MAYXC,EAAiB,YAAOC,IAAP,qBAAH,2CAQdC,EAAqB,YAAOC,IAAP,qBAAH,iJAUlBC,EAAa,YAAOD,IAAP,qBAAH,uEAMVE,EAAW,+KASXC,EAAc,2IAUdC,EAAW,+HAOXC,EAAgB,mGA0LPC,cACbC,YAAU,OAAQ,UAAW,iBAC7BA,YAAU,UAAW,cAAc,GACnCA,YAAU,SAAU,YAAa,IAHpBD,EArLF,SAAC,GAA+D,IAA7DE,EAA4D,EAA5DA,KAAMC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACpDC,EAAmBF,QAAkBG,EAE3C,OACE,kBAAC1B,EACK,CACF2B,QAAS,CACPC,QAAS,YAOb,kBAAC1B,EAAD,KACE,kBAACC,EACK,CACF0B,MAAO,mBACPC,MAAOX,EACPY,SAAU,SAAAC,GAAC,OAAIZ,EAAQY,EAAEC,OAAOH,UAGpC,kBAAC3B,EACK,CACF0B,MAAO,wBACPC,MAAOP,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAUQ,EAAEC,OAAOH,UAGtC,kBAACd,EAAD,6DAGA,kBAACR,EACK,CACFqB,MAAO,UACPK,QAASb,EACTU,SAAU,kBAAMT,GAAYD,OAIlC,kBAACN,EAAD,KACE,kBAACF,EAAD,KACE,kBAACH,EAAD,aACA,kBAACE,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,UACA,kBAACA,EAAD,WAEF,kBAACE,EAAD,KACE,kBAACJ,EAAD,iBACA,kBAACE,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,KAGZ,kBAACb,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,KAGZ,kBAACb,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,KAGZ,kBAACb,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,KAGZ,kBAACb,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,KAGZ,kBAACb,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,KAGZ,kBAACb,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,MAId,kBAACX,EAAD,KACE,kBAACJ,EAAD,eACA,kBAACE,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,EACRa,QAAQ,KAGZ,kBAAC1B,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,EACRa,QAAQ,KAGZ,kBAAC1B,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,EACRa,QAAQ,KAGZ,kBAAC1B,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,EACRa,QAAQ,KAGZ,kBAAC1B,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,EACRa,QAAQ,KAGZ,kBAAC1B,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,EACRa,QAAQ,KAGZ,kBAAC1B,EAAD,KACGuB,IAAQ,CACPC,KAAMjB,EACNkB,YAAa,EACbhB,UACAE,OAAQE,EACRa,QAAQ,WCpQhBtC,EAAe,0JAQfuC,EAAc,YAAO5B,IAAP,qBAAH,0DAcF6B,EATH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAaC,IAAI,aAAjB,+BACA,kBAAC,EAAD,QCbcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c0d81c23.chunk.js","sourcesContent":["import React from 'react'\nimport '../node_modules/material-components-web/dist/material-components-web.min.css'\nimport './App.css'\n\nimport styled from '@emotion/styled/macro'\nimport { Typography } from '@rmwc/typography'\nimport { TextField } from '@rmwc/textfield'\nimport { Checkbox } from '@rmwc/checkbox'\nimport { ThemeProvider } from '@rmwc/theme'\nimport { compose, withState } from 'recompose'\nimport { propOr } from 'ramda'\nimport inflect from 'czech-inflection'\n\nconst StyledContainer = styled(ThemeProvider)`\n  padding: 60px 30px 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n`\n\nconst StyledForm = styled.div`\n  padding: 10px 0px 10px;\n  display: flex;\n  flex-direction: column;\n  /* align-items: center; */\n`\n\nconst StyledInput = styled(TextField)`\n  margin-top: 20px;\n  &.mdc-text-field:not(.mdc-text-field--disabled) {\n    ${p => (p.bgColor ? `background-color: ${p.bgColor};` : '')}\n  }\n\n  &.mdc-text-field--focused:not(.mdc-text-field--disabled):not(.mdc-text-field--invalid)\n    .mdc-floating-label--float-above {\n    color: ${propOr('var(--mdc-theme-primary)', 'focusedLabelColor')};\n  }\n`\n\nconst StyledCheckbox = styled(Checkbox)`\n  margin-top: 30px;\n`\n\nconst StyledTitle = styled(Typography)`\n  color: #1c1c1c;\n`\n\nconst StyledSectionTitle = styled(Typography)`\n  color: #1c1c1c;\n  font-weight: 600;\n  border-bottom: 1px solid black;\n  height: 40px;\n  line-height: 40px;\n  width: 100%;\n  text-align: center;\n`\n\nconst StyledCell = styled(Typography)`\n  color: #1c1c1c;\n  height: 40px;\n  line-height: 40px;\n`\n\nconst StyledCases = styled.div`\n  flex-shrink: 0;\n  width: 50px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-right: 1px solid black;\n`\n\nconst StyledSingular = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`\n\nconst StyledPlural = StyledSingular\n\nconst StyledTable = styled.div`\n  display: flex;\n  align-items: stretch;\n  margin-top: 40px;\n  width: 100%;\n`\n\nconst StyledGenderInfo = styled.span`\n  margin-top: 10px;\n  font-size: 14px;\n`\n\nconst Form = ({ text, setText, animate, setAnimate, gender, setGender }) => {\n  const normalizedGender = gender ? gender : undefined\n\n  return (\n    <StyledContainer\n      {...{\n        options: {\n          primary: '#1bac9f',\n          // secondary: 'black',\n          // onPrimary: '#000',\n          // textPrimaryOnBackground: 'black',\n        },\n      }}\n    >\n      <StyledForm>\n        <StyledInput\n          {...{\n            label: 'Write Czech word',\n            value: text,\n            onChange: e => setText(e.target.value),\n          }}\n        />\n        <StyledInput\n          {...{\n            label: 'Gender - write m or f',\n            value: gender,\n            onChange: e => setGender(e.target.value),\n          }}\n        />\n        <StyledGenderInfo>\n          Gender is necessary for correct nickname inflections\n        </StyledGenderInfo>\n        <StyledCheckbox\n          {...{\n            label: 'Animate',\n            checked: animate,\n            onChange: () => setAnimate(!animate),\n          }}\n        />\n      </StyledForm>\n      <StyledTable>\n        <StyledCases>\n          <StyledSectionTitle>Case</StyledSectionTitle>\n          <StyledCell>1</StyledCell>\n          <StyledCell>2</StyledCell>\n          <StyledCell>3</StyledCell>\n          <StyledCell>4</StyledCell>\n          <StyledCell>5</StyledCell>\n          <StyledCell>6</StyledCell>\n          <StyledCell>7</StyledCell>\n        </StyledCases>\n        <StyledSingular>\n          <StyledSectionTitle>Singular</StyledSectionTitle>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 1,\n              animate,\n              gender: normalizedGender,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 2,\n              animate,\n              gender: normalizedGender,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 3,\n              animate,\n              gender: normalizedGender,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 4,\n              animate,\n              gender: normalizedGender,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 5,\n              animate,\n              gender: normalizedGender,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 6,\n              animate,\n              gender: normalizedGender,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 7,\n              animate,\n              gender: normalizedGender,\n            })}\n          </StyledCell>\n        </StyledSingular>\n        <StyledSingular>\n          <StyledSectionTitle>Plural</StyledSectionTitle>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 1,\n              animate,\n              gender: normalizedGender,\n              plural: true,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 2,\n              animate,\n              gender: normalizedGender,\n              plural: true,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 3,\n              animate,\n              gender: normalizedGender,\n              plural: true,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 4,\n              animate,\n              gender: normalizedGender,\n              plural: true,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 5,\n              animate,\n              gender: normalizedGender,\n              plural: true,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 6,\n              animate,\n              gender: normalizedGender,\n              plural: true,\n            })}\n          </StyledCell>\n          <StyledCell>\n            {inflect({\n              word: text,\n              grammarCase: 7,\n              animate,\n              gender: normalizedGender,\n              plural: true,\n            })}\n          </StyledCell>\n        </StyledSingular>\n      </StyledTable>\n    </StyledContainer>\n  )\n}\n\nexport default compose(\n  withState('text', 'setText', 'Tomáš'),\n  withState('animate', 'setAnimate', true),\n  withState('gender', 'setGender', ''),\n)(Form)\n","import React from 'react'\nimport '../node_modules/material-components-web/dist/material-components-web.min.css'\nimport './App.css'\n\nimport styled from '@emotion/styled/macro'\nimport { Typography } from '@rmwc/typography'\nimport Form from './Form'\n\nconst StyledContainer = styled.div`\n  padding: 60px 0px 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`\n\nconst StyledTitle = styled(Typography)`\n  color: #1c1c1c;\n  padding: 0px 15px;\n`\n\nconst App = () => {\n  return (\n    <StyledContainer>\n      <StyledTitle use=\"headline3\">Czech inflection JS library</StyledTitle>\n      <Form />\n    </StyledContainer>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}